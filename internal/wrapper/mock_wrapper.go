// Code generated by MockGen. DO NOT EDIT.
// Source: wrapper.go
//
// Generated by this command:
//
//	mockgen -source=wrapper.go -destination=mock_wrapper.go -package=wrapper -write_package_comment=false
package wrapper

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIWrapper is a mock of IWrapper interface.
type MockIWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockIWrapperMockRecorder
}

// MockIWrapperMockRecorder is the mock recorder for MockIWrapper.
type MockIWrapperMockRecorder struct {
	mock *MockIWrapper
}

// NewMockIWrapper creates a new mock instance.
func NewMockIWrapper(ctrl *gomock.Controller) *MockIWrapper {
	mock := &MockIWrapper{ctrl: ctrl}
	mock.recorder = &MockIWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWrapper) EXPECT() *MockIWrapperMockRecorder {
	return m.recorder
}

// CheckAllBucketsExist mocks base method.
func (m *MockIWrapper) CheckAllBucketsExist(ctx context.Context, bucketNames []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAllBucketsExist", ctx, bucketNames)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAllBucketsExist indicates an expected call of CheckAllBucketsExist.
func (mr *MockIWrapperMockRecorder) CheckAllBucketsExist(ctx, bucketNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllBucketsExist", reflect.TypeOf((*MockIWrapper)(nil).CheckAllBucketsExist), ctx, bucketNames)
}

// ClearBucket mocks base method.
func (m *MockIWrapper) ClearBucket(ctx context.Context, input ClearBucketInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearBucket", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearBucket indicates an expected call of ClearBucket.
func (mr *MockIWrapperMockRecorder) ClearBucket(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearBucket", reflect.TypeOf((*MockIWrapper)(nil).ClearBucket), ctx, input)
}

// GetLiveClearedMessage mocks base method.
func (m *MockIWrapper) GetLiveClearedMessage(bucket string, count int64, isCompleted bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveClearedMessage", bucket, count, isCompleted)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveClearedMessage indicates an expected call of GetLiveClearedMessage.
func (mr *MockIWrapperMockRecorder) GetLiveClearedMessage(bucket, count, isCompleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveClearedMessage", reflect.TypeOf((*MockIWrapper)(nil).GetLiveClearedMessage), bucket, count, isCompleted)
}

// GetLiveClearingMessage mocks base method.
func (m *MockIWrapper) GetLiveClearingMessage(bucket string, count int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveClearingMessage", bucket, count)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveClearingMessage indicates an expected call of GetLiveClearingMessage.
func (mr *MockIWrapperMockRecorder) GetLiveClearingMessage(bucket, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveClearingMessage", reflect.TypeOf((*MockIWrapper)(nil).GetLiveClearingMessage), bucket, count)
}

// ListBucketNamesFilteredByKeyword mocks base method.
func (m *MockIWrapper) ListBucketNamesFilteredByKeyword(ctx context.Context, keyword *string) ([]ListBucketNamesFilteredByKeywordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBucketNamesFilteredByKeyword", ctx, keyword)
	ret0, _ := ret[0].([]ListBucketNamesFilteredByKeywordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBucketNamesFilteredByKeyword indicates an expected call of ListBucketNamesFilteredByKeyword.
func (mr *MockIWrapperMockRecorder) ListBucketNamesFilteredByKeyword(ctx, keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBucketNamesFilteredByKeyword", reflect.TypeOf((*MockIWrapper)(nil).ListBucketNamesFilteredByKeyword), ctx, keyword)
}

// OutputCheckingMessage mocks base method.
func (m *MockIWrapper) OutputCheckingMessage(bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputCheckingMessage", bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutputCheckingMessage indicates an expected call of OutputCheckingMessage.
func (mr *MockIWrapperMockRecorder) OutputCheckingMessage(bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputCheckingMessage", reflect.TypeOf((*MockIWrapper)(nil).OutputCheckingMessage), bucket)
}

// OutputClearedMessage mocks base method.
func (m *MockIWrapper) OutputClearedMessage(bucket string, count int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputClearedMessage", bucket, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutputClearedMessage indicates an expected call of OutputClearedMessage.
func (mr *MockIWrapperMockRecorder) OutputClearedMessage(bucket, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputClearedMessage", reflect.TypeOf((*MockIWrapper)(nil).OutputClearedMessage), bucket, count)
}

// OutputDeletedMessage mocks base method.
func (m *MockIWrapper) OutputDeletedMessage(bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputDeletedMessage", bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutputDeletedMessage indicates an expected call of OutputDeletedMessage.
func (mr *MockIWrapperMockRecorder) OutputDeletedMessage(bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputDeletedMessage", reflect.TypeOf((*MockIWrapper)(nil).OutputDeletedMessage), bucket)
}
