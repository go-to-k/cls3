// Code generated by MockGen. DO NOT EDIT.
// Source: s3_vectors.go
//
// Generated by this command:
//
//	mockgen -source=s3_vectors.go -destination=mock_s3_vectors.go -package=client -write_package_comment=false
package client

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/s3vectors/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIS3Vectors is a mock of IS3Vectors interface.
type MockIS3Vectors struct {
	ctrl     *gomock.Controller
	recorder *MockIS3VectorsMockRecorder
}

// MockIS3VectorsMockRecorder is the mock recorder for MockIS3Vectors.
type MockIS3VectorsMockRecorder struct {
	mock *MockIS3Vectors
}

// NewMockIS3Vectors creates a new mock instance.
func NewMockIS3Vectors(ctrl *gomock.Controller) *MockIS3Vectors {
	mock := &MockIS3Vectors{ctrl: ctrl}
	mock.recorder = &MockIS3VectorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIS3Vectors) EXPECT() *MockIS3VectorsMockRecorder {
	return m.recorder
}

// DeleteIndex mocks base method.
func (m *MockIS3Vectors) DeleteIndex(ctx context.Context, indexName, vectorBucketName *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", ctx, indexName, vectorBucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndex indicates an expected call of DeleteIndex.
func (mr *MockIS3VectorsMockRecorder) DeleteIndex(ctx, indexName, vectorBucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockIS3Vectors)(nil).DeleteIndex), ctx, indexName, vectorBucketName)
}

// DeleteVectorBucket mocks base method.
func (m *MockIS3Vectors) DeleteVectorBucket(ctx context.Context, vectorBucketName *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVectorBucket", ctx, vectorBucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVectorBucket indicates an expected call of DeleteVectorBucket.
func (mr *MockIS3VectorsMockRecorder) DeleteVectorBucket(ctx, vectorBucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVectorBucket", reflect.TypeOf((*MockIS3Vectors)(nil).DeleteVectorBucket), ctx, vectorBucketName)
}

// ListIndexesByPage mocks base method.
func (m *MockIS3Vectors) ListIndexesByPage(ctx context.Context, vectorBucketName, nextToken *string) (*ListIndexesByPageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexesByPage", ctx, vectorBucketName, nextToken)
	ret0, _ := ret[0].(*ListIndexesByPageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexesByPage indicates an expected call of ListIndexesByPage.
func (mr *MockIS3VectorsMockRecorder) ListIndexesByPage(ctx, vectorBucketName, nextToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexesByPage", reflect.TypeOf((*MockIS3Vectors)(nil).ListIndexesByPage), ctx, vectorBucketName, nextToken)
}

// ListVectorBuckets mocks base method.
func (m *MockIS3Vectors) ListVectorBuckets(ctx context.Context) ([]types.VectorBucketSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVectorBuckets", ctx)
	ret0, _ := ret[0].([]types.VectorBucketSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVectorBuckets indicates an expected call of ListVectorBuckets.
func (mr *MockIS3VectorsMockRecorder) ListVectorBuckets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVectorBuckets", reflect.TypeOf((*MockIS3Vectors)(nil).ListVectorBuckets), ctx)
}
