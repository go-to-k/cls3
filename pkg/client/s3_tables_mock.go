// Code generated by MockGen. DO NOT EDIT.
// Source: s3_tables.go
//
// Generated by this command:
//
//	mockgen -source=s3_tables.go -destination=s3_tables_mock.go -package=client -write_package_comment=false
package client

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/s3tables/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIS3Tables is a mock of IS3Tables interface.
type MockIS3Tables struct {
	ctrl     *gomock.Controller
	recorder *MockIS3TablesMockRecorder
}

// MockIS3TablesMockRecorder is the mock recorder for MockIS3Tables.
type MockIS3TablesMockRecorder struct {
	mock *MockIS3Tables
}

// NewMockIS3Tables creates a new mock instance.
func NewMockIS3Tables(ctrl *gomock.Controller) *MockIS3Tables {
	mock := &MockIS3Tables{ctrl: ctrl}
	mock.recorder = &MockIS3TablesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIS3Tables) EXPECT() *MockIS3TablesMockRecorder {
	return m.recorder
}

// DeleteNamespace mocks base method.
func (m *MockIS3Tables) DeleteNamespace(ctx context.Context, bucketName, namespace, tableBucketARN *string, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", ctx, bucketName, namespace, tableBucketARN, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockIS3TablesMockRecorder) DeleteNamespace(ctx, bucketName, namespace, tableBucketARN, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockIS3Tables)(nil).DeleteNamespace), ctx, bucketName, namespace, tableBucketARN, region)
}

// DeleteTable mocks base method.
func (m *MockIS3Tables) DeleteTable(ctx context.Context, bucketName, tableName, namespace, tableBucketARN *string, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", ctx, bucketName, tableName, namespace, tableBucketARN, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable.
func (mr *MockIS3TablesMockRecorder) DeleteTable(ctx, bucketName, tableName, namespace, tableBucketARN, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockIS3Tables)(nil).DeleteTable), ctx, bucketName, tableName, namespace, tableBucketARN, region)
}

// DeleteTableBucket mocks base method.
func (m *MockIS3Tables) DeleteTableBucket(ctx context.Context, bucketName, tableBucketARN *string, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTableBucket", ctx, bucketName, tableBucketARN, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTableBucket indicates an expected call of DeleteTableBucket.
func (mr *MockIS3TablesMockRecorder) DeleteTableBucket(ctx, bucketName, tableBucketARN, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableBucket", reflect.TypeOf((*MockIS3Tables)(nil).DeleteTableBucket), ctx, bucketName, tableBucketARN, region)
}

// ListNamespaces mocks base method.
func (m *MockIS3Tables) ListNamespaces(ctx context.Context, bucketName, tableBucketARN *string, region string) ([]types.NamespaceSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaces", ctx, bucketName, tableBucketARN, region)
	ret0, _ := ret[0].([]types.NamespaceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockIS3TablesMockRecorder) ListNamespaces(ctx, bucketName, tableBucketARN, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockIS3Tables)(nil).ListNamespaces), ctx, bucketName, tableBucketARN, region)
}

// ListTableBuckets mocks base method.
func (m *MockIS3Tables) ListTableBuckets(ctx context.Context, region string) ([]types.TableBucketSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableBuckets", ctx, region)
	ret0, _ := ret[0].([]types.TableBucketSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTableBuckets indicates an expected call of ListTableBuckets.
func (mr *MockIS3TablesMockRecorder) ListTableBuckets(ctx, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableBuckets", reflect.TypeOf((*MockIS3Tables)(nil).ListTableBuckets), ctx, region)
}

// ListTables mocks base method.
func (m *MockIS3Tables) ListTables(ctx context.Context, bucketName, tableBucketARN, namespace *string, region string) ([]types.TableSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", ctx, bucketName, tableBucketARN, namespace, region)
	ret0, _ := ret[0].([]types.TableSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockIS3TablesMockRecorder) ListTables(ctx, bucketName, tableBucketARN, namespace, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockIS3Tables)(nil).ListTables), ctx, bucketName, tableBucketARN, namespace, region)
}
